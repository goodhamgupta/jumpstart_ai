defmodule JumpstartAi.Repo.Migrations.AddCalendarEvents do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:users) do
      add :calendar_sync_status, :text
      add :calendar_synced_at, :utc_datetime_usec
    end

    create table(:calendar_events, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "calendar_events_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :google_event_id, :text
      add :summary, :text
      add :description, :text
      add :location, :text
      add :start_time, :utc_datetime
      add :end_time, :utc_datetime
      add :attendees, :text, default: "[]"
      add :creator, :text
      add :organizer, :text
      add :status, :text, default: "confirmed"
      add :html_link, :text
      add :google_created_at, :utc_datetime
      add :google_updated_at, :utc_datetime
    end

    create unique_index(:calendar_events, [:user_id, :google_event_id],
             name: "calendar_events_unique_google_event_per_user_index"
           )
  end

  def down do
    drop_if_exists unique_index(:calendar_events, [:user_id, :google_event_id],
                     name: "calendar_events_unique_google_event_per_user_index"
                   )

    drop constraint(:calendar_events, "calendar_events_user_id_fkey")

    drop table(:calendar_events)

    alter table(:users) do
      remove :calendar_synced_at
      remove :calendar_sync_status
    end
  end
end
